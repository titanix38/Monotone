<!--***********************************************************************************

   AvalonDock

   Copyright (C) 2007-2013 Xceed Software Inc.

   This program is provided to you under the terms of the New BSD
   License (BSD) as published at http://avalondock.codeplex.com/license 

   For more features, controls, and fast professional support,
   pick up AvalonDock in Extended WPF Toolkit Plus at http://xceed.com/wpf_toolkit

   Stay informed: follow @datagrid on Twitter or Like facebook.com/datagrids

  **********************************************************************************-->

<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=Xceed.Wpf.AvalonDock"
    
    xmlns:avalonDock="clr-namespace:Xceed.Wpf.AvalonDock;assembly=Xceed.Wpf.AvalonDock"
    xmlns:avalonDockLayout="clr-namespace:Xceed.Wpf.AvalonDock.Layout;assembly=Xceed.Wpf.AvalonDock"
    xmlns:avalonDockControls="clr-namespace:Xceed.Wpf.AvalonDock.Controls;assembly=Xceed.Wpf.AvalonDock"
    xmlns:avalonDockConverters="clr-namespace:Xceed.Wpf.AvalonDock.Converters;assembly=Xceed.Wpf.AvalonDock"
    xmlns:avalonDockProperties="clr-namespace:Xceed.Wpf.AvalonDock.Properties;assembly=Xceed.Wpf.AvalonDock"
    >


    <avalonDockConverters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <avalonDockConverters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter"/>
    <avalonDockConverters:AnchorSideToOrientationConverter x:Key="AnchorSideToOrientationConverter"/>
    <avalonDockConverters:AnchorSideToAngleConverter x:Key="AnchorSideToAngleConverter"/>
    <avalonDockConverters:NullToDoNothingConverter x:Key="NullToDoNothingConverter"/>
    <avalonDockConverters:LayoutItemFromLayoutModelConverter x:Key="LayoutItemFromLayoutModelConverter"/>
    <avalonDockConverters:ActivateCommandLayoutItemFromLayoutModelConverter x:Key="ActivateCommandLayoutItemFromLayoutModelConverter"/>

    
    <Style x:Key="AvalonDock_ThemeMonotone_ToolButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="{DynamicResource ButtonBorderThickness}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource DarkerSelectedBrush}"/>
                <Setter Property="Background"
									    Value="{DynamicResource LighterBaseGradientHoverBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource DarkerSelectedBrush}"/>
                <Setter Property="Background"
									    Value="{DynamicResource LighterBaseGradientHoverBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AvalonDock_ThemeMonotone_ButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="{DynamicResource ButtonBorderThickness}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource DarkerSelectedBrush}"/>
                <Setter Property="Background"
									    Value="{DynamicResource LighterBaseGradientHoverBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DocumentPaneControlStyle-->
    <Style x:Key="AvalonDock_ThemeMonotone_DocumentPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
        <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!--Following border is required to catch mouse events-->
                        <Border Background="Transparent" Grid.RowSpan="2"/>
                        <Grid  Panel.ZIndex="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <avalonDockControls:DocumentPaneTabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Margin="1,0,1,-1" Grid.Row="0" KeyboardNavigation.TabIndex="1"/>
                            <avalonDockControls:DropDownButton
                                x:Name="MenuDropDownButton"
                                Style="{StaticResource AvalonDock_ThemeMonotone_ToolButtonStyle}"
                                Focusable="False"
                                VerticalAlignment="Center"
                                Grid.Column="1">
                                <avalonDockControls:DropDownButton.DropDownContextMenu>
                                    <avalonDockControls:ContextMenuEx ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
                                        <avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                            <Style TargetType="{x:Type avalonDockControls:MenuItemEx}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                <Setter Property="HeaderTemplate" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}"/>
                                                <Setter Property="HeaderTemplateSelector" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}"/>
                                                <Setter Property="IconTemplate" Value="{Binding Path=Root.Manager.IconContentTemplate}"/>
                                                <Setter Property="IconTemplateSelector" Value="{Binding Path=Root.Manager.IconContentTemplateSelector}"/>
                                                <Setter Property="Command" Value="{Binding Path=., Converter={StaticResource ActivateCommandLayoutItemFromLayoutModelConverter}}"/>
                                            </Style>
                                        </avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                        <avalonDockControls:ContextMenuEx.Style>
                                            <Style TargetType="{x:Type avalonDockControls:ContextMenuEx}" BasedOn="{StaticResource {x:Type ContextMenu}}">
                                            </Style>
                                        </avalonDockControls:ContextMenuEx.Style>
                                    </avalonDockControls:ContextMenuEx>
                                </avalonDockControls:DropDownButton.DropDownContextMenu>
                                <Path Data="M 2,2 L10,2 L10,4 L2,4 Z M2,6 L10,6 L6,10" Fill="{DynamicResource TextBrush}" />
                            </avalonDockControls:DropDownButton>
                        </Grid>
                        <Border x:Name="ContentPanel" 
                                VerticalAlignment="Stretch" 
                                HorizontalAlignment="Stretch"  
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Grid.Column="0"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                Grid.Row="1" 
                                KeyboardNavigation.TabIndex="2" 
                                KeyboardNavigation.TabNavigation="Cycle"
                                CornerRadius="{DynamicResource TabTopCornerRadius}"
                                Padding="{DynamicResource DefaultBorderThickness}">
                            <Border Background="{DynamicResource BaseBrush}">
                            <ContentPresenter x:Name="PART_SelectedContentHost" 
                                              ContentSource="SelectedContent" 
                                              Margin="0,2,0,2"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" SourceName="MenuDropDownButton" Value="True">
                            <Setter Property="Content" TargetName="MenuDropDownButton">
                                <Setter.Value>
                                    <Path Data="M 2,2 L10,2 L10,4 L2,4 Z M2,6 L10,6 L6,10" Fill="{DynamicResource SelectedBrush}" />

                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" SourceName="MenuDropDownButton" Value="True">
                            <Setter Property="Content" TargetName="MenuDropDownButton">
                                <Setter.Value>
                                    <Path Data="M 2,2 L10,2 L10,4 L2,4 Z M2,6 L10,6 L6,10" Fill="{DynamicResource DarkerSelectedBrush}" />

                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="MenuDropDownButton" Value="False">
                            <Setter Property="Content" TargetName="MenuDropDownButton">
                                <Setter.Value>
                                    <Path Data="M 2,2 L10,2 L10,4 L2,4 Z M2,6 L10,6 L6,10" Fill="{DynamicResource BaseBorderBrush}" />

                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="ContentPanel" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
									        Value="{DynamicResource DarkerSelectedBrush}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
									        Value="{DynamicResource SelectedTabColorBrush}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}"/>
                            <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ChildrenCount}" Value="0">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="MenuDropDownButton" />
                        </DataTrigger>                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Foreground" Value="{DynamicResource VeryLighterBaseBrush}"/>                   
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                    <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                    <!--<Setter Property="Padding" Value="2,0,2,0"/>
                    <Setter Property="Margin" Value="2,0,2,0"/>-->
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid SnapsToDevicePixels="true">
                                    <Border x:Name="Bd" 
							              BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{DynamicResource TabHeaderTopThickness}" CornerRadius="{DynamicResource TabTopHeaderCornerRadius}"
							              Background="{TemplateBinding Background}" 
							              Padding="{TemplateBinding Padding}">
                                        <ContentPresenter 
								            x:Name="Content" 
								            ContentSource="Header" 
                                            HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                                            VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                            RecognizesAccessKey="True" 
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Selector.IsSelected"
								            Value="true">
                                        <Setter Property="BorderBrush"
									        Value="{DynamicResource BaseBrush}" />
                                        <Setter Property="Background"
									        Value="{DynamicResource BaseBrush}" />
                                        <Setter Property="Foreground"
									        Value="{DynamicResource HoverTabColorBrush}"/>
                                        <Setter Property="Panel.ZIndex" 
                                            Value="1" />
                                        <Setter Property="Margin" Value="{DynamicResource TabBottomContentPlacement}"/>
                                        <Setter Property="Margin" TargetName="Content" Value="0,0,0,3"/>
                                    </Trigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsActive}" Value="True"/>
                                            <Condition Binding="{Binding IsLastFocusedDocument}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="BorderBrush"
									        Value="{DynamicResource DarkerSelectedBrush}" />
                                        <Setter Property="Background"
									        Value="{DynamicResource BaseBrush}" />
                                        <Setter Property="Foreground"
									        Value="{DynamicResource TextBrush}"/>
                                        <Setter Property="Panel.ZIndex" 
                                            Value="1" />
                                    </MultiDataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsActive}" Value="False"/>
                                            <Condition Binding="{Binding IsLastFocusedDocument}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="BorderBrush"
									        Value="{DynamicResource SelectedTabColorBrush}" />
                                        <Setter Property="Background"
									        Value="{DynamicResource BaseBrush}" />
                                        <Setter Property="Foreground"
									        Value="{DynamicResource TextBrush}"/>
                                        <Setter Property="Panel.ZIndex" 
                                            Value="1" />
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsActive}" Value="true"/>
                                            <Condition Binding="{Binding Content.IsDirty}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Foreground" Value="{DynamicResource ErrorBrush}"/>
                                        <Setter Property="FontStyle" Value="Italic" />
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsActive}" Value="false"/>
                                            <Condition Binding="{Binding Content.IsDirty}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Foreground" Value="{DynamicResource DarkerErrorBrush}"/>
                                        <Setter Property="FontStyle" Value="Italic" />
                                    </MultiDataTrigger>

                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="true"/>
                                            <Condition Property="Selector.IsSelected" Value="false"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="BorderBrush" Value="{DynamicResource SelectedBrush}"/>
                                        <Setter Property="Background" Value="{DynamicResource LighterBaseGradientHoverBrush}"/>
                                        <Setter Property="Panel.ZIndex" Value="0" />
                                    </MultiTrigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}"/>
                                        <Setter Property="Background" Value="{DynamicResource BaseBrush}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentTabItem Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentControl Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--AnchorablePaneControlStyle-->
    <Style x:Key="AvalonDock_ThemeMonotone_AnchorablePaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
        <Setter Property="TabStripPlacement" Value="Bottom"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="{DynamicResource DefaultBorderThickness}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SelectedTabColorBrush}" />
        <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Background" Value="{DynamicResource BaseBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <!--Following border is required to catch mouse events-->
                        <Border Background="Transparent" Grid.RowSpan="2"/>
                        <Border x:Name="ContentPanel" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" 
                                Grid.Column="0" 
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                Grid.Row="0" 
                                CornerRadius="{DynamicResource TabBottomCornerRadius}"
                                KeyboardNavigation.TabIndex="2" 
                                KeyboardNavigation.TabNavigation="Cycle">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              ContentSource="SelectedContent" 
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <avalonDockControls:AnchorablePaneTabPanel x:Name="HeaderPanel" Margin="0,0,2,2" IsItemsHost="true" Grid.Row="1" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
                            <Setter Property="Margin" Value="0" TargetName="HeaderPanel"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
       

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="Foreground" Value="{DynamicResource HoverTabColorBrush}"/>
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                    <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid SnapsToDevicePixels="true">
                                    <Border x:Name="Bd" 
							              BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{DynamicResource TabHeaderBottomThickness}" CornerRadius="{DynamicResource TabBottomHeaderCornerRadius}"
							              Background="{TemplateBinding Background}" 
							              Padding="{TemplateBinding Padding}">
                                        <ContentPresenter 
								            x:Name="Content" 
								            ContentSource="Header" 
                                            HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                                            VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                            RecognizesAccessKey="True" 
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Selector.IsSelected"
								        Value="true">
                                            <Setter Property="BorderBrush"
									    Value="{DynamicResource BaseBorderBrush}" />
                                            <Setter Property="Background"
									    Value="{DynamicResource BaseBrush}" />
                                            <Setter Property="Foreground"
									    Value="{DynamicResource TextBrush}"/>
                                            <Setter Property="Panel.ZIndex" 
                                        Value="1" />
                                        <Setter Property="Margin" Value="{DynamicResource TabTopContentPlacement}"/>
                                        <Setter Property="Margin" TargetName="Content" Value="0,1,0,0"/>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="true"/>
                                            <Condition Property="Selector.IsSelected" Value="false"/>
                                            <Condition Property="IsEnabled" Value="true" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="BorderBrush" Value="{DynamicResource SelectedBrush}"/>
                                        <Setter Property="Background" Value="{DynamicResource LighterBaseGradientHoverBrush}"/>
                                        <Setter Property="Panel.ZIndex" Value="0" />
                                    </MultiTrigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}"/>
                                        <Setter Property="Background" Value="{DynamicResource BaseBrush}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutAnchorableTabItem Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutAnchorableControl Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        <!-- <Trigger Property="IsVisible" Value="true">
                <Setter Property="BorderBrush"  Value="{DynamicResource DarkerSelectedBrush}" />
            </Trigger>
               <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush"  Value="{DynamicResource DarkerSelectedBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush"  Value="{DynamicResource SelectedTabColorBrush}" />
            </MultiDataTrigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource SelectedBrush}" />
            </Trigger>
            <Trigger Property="Selector.IsSelected" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource DarkerSelectedBrush}" />
            </Trigger>-->
        </Style.Triggers>
    </Style>

    <Style TargetType="avalonDockControls:AnchorablePaneTitle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="0,2,0,1">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <avalonDockControls:DropDownControlArea 
                                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                                <ContentPresenter 
                                    x:Name="Header"            
                                    Margin="2,0,0,0"
                                    TextElement.Foreground="{DynamicResource HoverTabColorBrush}"
                                    Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" 
                                    ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                    ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </avalonDockControls:DropDownControlArea>


                            <avalonDockControls:DropDownButton
                                x:Name="MenuDropDownButton"
                                VerticalAlignment="Center"
                                Style="{StaticResource AvalonDock_ThemeMonotone_ToolButtonStyle}"
                                Focusable="False"
                                Grid.Column="1"
                                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
                                <Path Data="M2,6 L10,6 L6,10"  Name="PART_MenuPinPath" SnapsToDevicePixels="True" Fill="{DynamicResource TextBrush}"  />
                            </avalonDockControls:DropDownButton>

                            <Button x:Name="PART_AutoHidePin" 
                                Grid.Column="2" 
                                Focusable="False"
                                Style="{StaticResource AvalonDock_ThemeMonotone_ButtonStyle}"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                Command="{Binding Path=LayoutItem.AutoHideCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}"
                                    >
                                <Path x:Name="PART_AutoHidePinPath" SnapsToDevicePixels="True" Fill="{DynamicResource TextBrush}" >
                                    <Path.Data>
                                        <CombinedGeometry GeometryCombineMode="Xor">
                                            <CombinedGeometry.Geometry1>
                                                <PathGeometry Figures="M 4,3 L4,7 L6,7 L6,3" />
                                            </CombinedGeometry.Geometry1>
                                            <CombinedGeometry.Geometry2>
                                                <PathGeometry Figures="M 3,2 L8,2 L8,7 L9,7 L9,8 L6,8 L6,11 L5,11 L5,8 L2,8 L2,7 L3,7" />

                                            </CombinedGeometry.Geometry2>
                                        </CombinedGeometry>
                                    </Path.Data>
                                    <Path.LayoutTransform>
                                        <ScaleTransform ScaleX="1.1" ScaleY="1.1" />
                                    </Path.LayoutTransform>
                                </Path>
                            </Button>
                            <Button x:Name="PART_HidePin" 
                                Grid.Column="3" 
                                Focusable="False"
                                Style="{StaticResource AvalonDock_ThemeMonotone_ButtonStyle}"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                Command="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                                    >
                                <Path Stroke="{DynamicResource GlyphBrush}" StrokeThickness="2" x:Name="PART_ClosePinPath" Data="M 2 9 L 9 2  M9,9 L2,2"   SnapsToDevicePixels="True">
                                  
                                </Path>
                            </Button>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Model.IsAutoHidden, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter Property="LayoutTransform" TargetName="PART_AutoHidePin">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LighterBaseGradientBrush2}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource TextBrush}" TargetName="Header"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" SourceName="MenuDropDownButton" Value="True">
                            <Setter Property="Fill" TargetName="PART_MenuPinPath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" SourceName="MenuDropDownButton" Value="True">
                            <Setter Property="Fill" TargetName="PART_MenuPinPath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_AutoHidePin" Value="True">
                            <Setter Property="Fill" TargetName="PART_AutoHidePinPath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_HidePin" Value="True">
                            <Setter Property="Stroke" TargetName="PART_ClosePinPath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="PART_HidePin" Value="True">
                            <Setter Property="Stroke" TargetName="PART_ClosePinPath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="PART_AutoHidePin" Value="True">
                            <Setter Property="Fill" TargetName="PART_AutoHidePinPath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="MenuDropDownButton" Value="false">
                            <Setter Property="Fill" TargetName="PART_MenuPinPath" Value="{DynamicResource BaseBorderBrush}"/>
                            <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource DisabledBrush}" TargetName="Header"/>

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="AvalonDock_ThemeMonotone_AnchorSideTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorSideControl}">
        <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel 
                        MinWidth="4"
                        MinHeight="4"
                        Orientation="{Binding Path=Model.Side, RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorSideControl}, Mode=FindAncestor}, Converter={StaticResource AnchorSideToOrientationConverter}}"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </ControlTemplate>

    <ControlTemplate x:Key="AvalonDock_ThemeMonotone_AnchorGroupTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorGroupControl}">
        <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
            <ItemsControl.LayoutTransform>
                <RotateTransform Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Model.Parent.Side, Converter={StaticResource AnchorSideToAngleConverter}}"/>
            </ItemsControl.LayoutTransform>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </ControlTemplate>

    <ControlTemplate x:Key="AvalonDock_ThemeMonotone_AnchorTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorControl}">
        <Border 
            x:Name="Bd"
            Background="{DynamicResource BaseBrush}"
            BorderThickness="{DynamicResource DefaultBorderThickness}" CornerRadius="{DynamicResource TabTopHeaderCornerRadius}"
            Margin="0,4,0,0"
            Padding="2">
                <ContentPresenter 
                    TextElement.Foreground="{DynamicResource HoverTabColorBrush}"
                    Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" 
                    ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                    ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Side" Value="Right">
                <Setter Property="CornerRadius" Value="{DynamicResource TabBottomHeaderCornerRadius}" TargetName="Bd"/>
                <Setter Property="Margin" Value="0,0,0,4" TargetName="Bd"/>
            </Trigger>
            <Trigger Property="Side" Value="Bottom">
                <Setter Property="CornerRadius" Value="{DynamicResource TabTopHeaderCornerRadius}" TargetName="Bd"/>
                <Setter Property="Margin" Value="0,4,0,0" TargetName="Bd"/>
            </Trigger>
            <Trigger Property="Side" Value="Top">
                <Setter Property="CornerRadius" Value="{DynamicResource TabBottomHeaderCornerRadius}" TargetName="Bd"/>
                <Setter Property="Margin" Value="0,0,0,4" TargetName="Bd"/>
            </Trigger>            
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"/>
                    <Condition Property="Selector.IsSelected" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SelectedBrush}" TargetName="Bd"/>
                <Setter Property="Background" Value="{DynamicResource LighterBaseGradientHoverBrush}" TargetName="Bd"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Bd"/>
                <Setter Property="Background" Value="{DynamicResource BaseBrush}" TargetName="Bd"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type avalonDockControls:OverlayWindow}" TargetType="{x:Type avalonDockControls:OverlayWindow}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:OverlayWindow}">
                    <Canvas x:Name="PART_DropTargetsContainer" Opacity="0.9">
                        <Path x:Name="PART_PreviewBox" Fill="AliceBlue" StrokeThickness="2" Stroke="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        <Grid x:Name="PART_DockingManagerDropTargets" >
                            <Image x:Name="PART_DockingManagerDropTargetLeft" VerticalAlignment="Center" HorizontalAlignment="Left" Source="/MonotoneTheme;component/Images/DockAnchorableLeft.PNG" Stretch="None" />
                            <Image x:Name="PART_DockingManagerDropTargetRight" VerticalAlignment="Center" HorizontalAlignment="Right" Source="/MonotoneTheme;component/Images/DockAnchorableRight.PNG" Stretch="None" />
                            <Image x:Name="PART_DockingManagerDropTargetBottom" VerticalAlignment="Bottom" HorizontalAlignment="Center" Source="/MonotoneTheme;component/Images/DockAnchorableBottom.PNG" Stretch="None" />
                            <Image x:Name="PART_DockingManagerDropTargetTop" VerticalAlignment="Top" HorizontalAlignment="Center" Source="/MonotoneTheme;component/Images/DockAnchorableTop.PNG" Stretch="None"/>
                        </Grid>
                        <Grid x:Name="PART_AnchorablePaneDropTargets">
                            <Grid Width="112" Height="112" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Image Grid.ColumnSpan="3" Grid.RowSpan="3" Source="/MonotoneTheme;component/Images/DockPaneEmpty.png" Stretch="None" Margin="0,0.5,0,-0.5"/>
                                <Border Name="PART_AnchorablePaneDropTargetTop" Grid.Column="1" Grid.Row="0" Margin="0,3.5,0, 0">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentAsAnchorableTop.png"  Stretch="None" />
                                </Border>
                                <Border Name="PART_AnchorablePaneDropTargetRight" Grid.Column="2" Grid.Row="1" Margin="2">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentAsAnchorableRight.png"  Stretch="None"/>
                                </Border>
                                <Border Name="PART_AnchorablePaneDropTargetBottom" Grid.Column="1" Grid.Row="2" Margin="0,-0.5,0,0">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentAsAnchorableBottom.png"  Stretch="None"/>
                                </Border>
                                <Border Name="PART_AnchorablePaneDropTargetLeft" Grid.Column="0" Grid.Row="1" Margin="2">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentAsAnchorableLeft.png"  Stretch="None"/>
                                </Border>
                                <Border Name="PART_AnchorablePaneDropTargetInto" Grid.Column="1" Grid.Row="1" Margin="0,0.5,0,0">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentInside.png"  Stretch="None"/>
                                </Border>
                            </Grid>
                        </Grid>
                        <Grid x:Name="PART_DocumentPaneDropTargets">
                            <Grid Width="112" Height="112" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Image Grid.ColumnSpan="3" Grid.RowSpan="3" Source="/MonotoneTheme;component/Images/DockPaneEmpty.PNG"  Stretch="None"/>
                                <Border Name="PART_DocumentPaneDropTargetTop" Grid.Column="1" Grid.Row="0" Margin="2">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentTop.png"  Stretch="None"/>
                                </Border>
                                <Border Name="PART_DocumentPaneDropTargetRight" Grid.Column="2" Grid.Row="1" Margin="2">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentRight.png"  Stretch="None"/>
                                </Border>
                                <Border Name="PART_DocumentPaneDropTargetBottom" Grid.Column="1" Grid.Row="2" Margin="2">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentBottom.png"  Stretch="None"/>
                                </Border>
                                <Border Name="PART_DocumentPaneDropTargetLeft" Grid.Column="0" Grid.Row="1" Margin="2">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentLeft.png"  Stretch="None"/>
                                </Border>
                                <Border Name="PART_DocumentPaneDropTargetInto" Grid.Column="1" Grid.Row="1">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentInside.png"  Stretch="None"/>
                                </Border>
                            </Grid>
                        </Grid>

                        <Grid x:Name="PART_DocumentPaneFullDropTargets">
                            <Grid Width="184" Height="184" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Image Grid.ColumnSpan="5" Grid.RowSpan="5" Source="/MonotoneTheme;component/Images/DockPaneLargeEmpty.PNG"  Stretch="None"/>
                                <Border Name="PART_DocumentPaneFullDropTargetTop" Grid.Column="2" Grid.Row="1">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentTop.png"  Stretch="None" Margin="2"/>
                                </Border>
                                <Border Name="PART_DocumentPaneFullDropTargetRight" Grid.Column="3" Grid.Row="2">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentRight.png"  Stretch="None" Margin="2"/>
                                </Border>
                                <Border Name="PART_DocumentPaneFullDropTargetBottom" Grid.Column="2" Grid.Row="3">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentBottom.png"  Stretch="None" Margin="2"/>
                                </Border>
                                <Border Name="PART_DocumentPaneFullDropTargetLeft" Grid.Column="1" Grid.Row="2">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentLeft.png"  Stretch="None" Margin="2"/>
                                </Border>
                                <Border Name="PART_DocumentPaneFullDropTargetInto" Grid.Column="2" Grid.Row="2">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentInside.png"  Stretch="None"/>
                                </Border>

                                <Border Name="PART_DocumentPaneDropTargetTopAsAnchorablePane" Grid.Column="2" Grid.Row="0">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentAsAnchorableTop.png"  Stretch="None" Margin="2"/>
                                </Border>
                                <Border Name="PART_DocumentPaneDropTargetRightAsAnchorablePane" Grid.Column="4" Grid.Row="2">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentAsAnchorableRight.png"  Stretch="None" Margin="2"/>
                                </Border>
                                <Border Name="PART_DocumentPaneDropTargetBottomAsAnchorablePane" Grid.Column="2" Grid.Row="4">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentAsAnchorableBottom.png"  Stretch="None" Margin="2"/>
                                </Border>
                                <Border Name="PART_DocumentPaneDropTargetLeftAsAnchorablePane" Grid.Column="0" Grid.Row="2">
                                    <Image Source="/MonotoneTheme;component/Images/DockDocumentAsAnchorableLeft.png"  Stretch="None" Margin="2"/>
                                </Border>

                            </Grid>
                        </Grid>

                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="AvalonDock_ThemeMonotone_DocumentHeaderTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_ThemeMonotone_AnchorableHeaderTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Image x:Name="icon" Width="16" Source="{Binding IconSource, Converter={StaticResource NullToDoNothingConverter}}" Stretch="Uniform"/>
            <TextBlock x:Name="title" Margin="4,0,0,0" Text="{Binding Title}" TextTrimming="CharacterEllipsis" Grid.Column="1"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
                <Setter Property="Margin" Value="0" TargetName="title"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_ThemeMonotone_DocumentTitleTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_ThemeMonotone_AnchorableTitleTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_ThemeMonotone_IconContentTemplate">
        <Image Source="{Binding IconSource, Converter={StaticResource NullToDoNothingConverter}}" Stretch="Uniform"/>
    </DataTemplate>

    <ContextMenu x:Key="AvalonDock_ThemeMonotone_AnchorableContextMenu">
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Anchorable_Float}" 
                Command="{Binding Path=FloatCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Anchorable_Dock}" 
                Command="{Binding Path=DockCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Anchorable_DockAsDocument}" 
                Command="{Binding Path=DockAsDocumentCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Anchorable_AutoHide}" 
                Command="{Binding Path=AutoHideCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Anchorable_Hide}" 
                Command="{Binding Path=HideCommand}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"/>
    </ContextMenu>

    <ContextMenu x:Key="AvalonDock_ThemeMonotone_DocumentContextMenu">
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_Close}" 
                  Command="{Binding Path=CloseCommand}"
                  Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_CloseAllButThis}" 
                Command="{Binding Path=CloseAllButThisCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_Float}" 
                Command="{Binding Path=FloatCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_DockAsDocument}" 
                Command="{Binding Path=DockAsDocumentCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_NewHorizontalTabGroup}" 
                Command="{Binding Path=NewHorizontalTabGroupCommand}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}">
            <MenuItem.Icon>
                <Image Source="/Xceed.Wpf.AvalonDock;component/Themes/Aero/Images/HTabGroup.png" Stretch="Uniform" Width="14"/>
            </MenuItem.Icon>
        </MenuItem>

        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_NewVerticalTabGroup}" 
                Command="{Binding Path=NewVerticalTabGroupCommand}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}">
            <MenuItem.Icon>
            <Image Source="/Xceed.Wpf.AvalonDock;component/Themes/Aero/Images/VTabGroup.png" Stretch="Uniform" Width="14"/>
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_MoveToNextTabGroup}" 
                Command="{Binding Path=MoveToNextTabGroupCommand}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_MoveToPreviousTabGroup}" 
                Command="{Binding Path=MoveToPreviousTabGroupCommand}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"/>
    </ContextMenu>

    <!--DockingManager-->
    <Style x:Key="{x:Type avalonDock:DockingManager}" TargetType="{x:Type avalonDock:DockingManager}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="DocumentPaneControlStyle" Value="{StaticResource AvalonDock_ThemeMonotone_DocumentPaneControlStyle}"/>
        <Setter Property="AnchorablePaneControlStyle" Value="{StaticResource AvalonDock_ThemeMonotone_AnchorablePaneControlStyle}"/>
        <Setter Property="AnchorSideTemplate" Value="{StaticResource AvalonDock_ThemeMonotone_AnchorSideTemplate}"/>
        <Setter Property="AnchorGroupTemplate" Value="{StaticResource AvalonDock_ThemeMonotone_AnchorGroupTemplate}"/>
        <Setter Property="AnchorTemplate" Value="{StaticResource AvalonDock_ThemeMonotone_AnchorTemplate}"/>
        <Setter Property="DocumentHeaderTemplate" Value="{StaticResource AvalonDock_ThemeMonotone_DocumentHeaderTemplate}"/>
        <Setter Property="AnchorableHeaderTemplate" Value="{StaticResource AvalonDock_ThemeMonotone_AnchorableHeaderTemplate}"/>
        <Setter Property="DocumentTitleTemplate" Value="{StaticResource AvalonDock_ThemeMonotone_DocumentTitleTemplate}"/>
        <Setter Property="AnchorableTitleTemplate" Value="{StaticResource AvalonDock_ThemeMonotone_AnchorableTitleTemplate}"/>
        <Setter Property="AnchorableContextMenu" Value="{StaticResource AvalonDock_ThemeMonotone_AnchorableContextMenu}"/>
        <Setter Property="DocumentContextMenu" Value="{StaticResource AvalonDock_ThemeMonotone_DocumentContextMenu}"/>
        <Setter Property="DocumentPaneMenuItemHeaderTemplate" Value="{StaticResource AvalonDock_ThemeMonotone_DocumentHeaderTemplate}"/>
        <Setter Property="IconContentTemplate" Value="{StaticResource AvalonDock_ThemeMonotone_IconContentTemplate}"/>
        <Setter Property="GridSplitterWidth" Value="4"/>
        <Setter Property="GridSplitterHeight" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDock:DockingManager}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{DynamicResource DefaultCornerRadius}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Content="{TemplateBinding LayoutRootPanel}" Grid.Column="1" Grid.Row="1"/>
                            <ContentPresenter Content="{TemplateBinding RightSidePanel}" Grid.Column="2" Grid.Row="1"/>
                            <ContentPresenter Content="{TemplateBinding LeftSidePanel}" Grid.Column="0" Grid.Row="1"/>
                            <ContentPresenter Content="{TemplateBinding TopSidePanel}" Grid.Column="1" Grid.Row="0"/>
                            <ContentPresenter Content="{TemplateBinding BottomSidePanel}" Grid.Column="1" Grid.Row="2"/>
                            <ContentPresenter 
                                x:Name="PART_AutoHideArea"
                                Content="{TemplateBinding AutoHideWindow}"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                Grid.Column="1" Grid.Row="1"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--LayoutGridResizerControl-->
    <Style x:Key="{x:Type avalonDockControls:LayoutGridResizerControl}" TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
                    <Border Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <!--<ContentPresenter Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}" 
                                          ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                          ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"/>-->
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
                    <avalonDockControls:DropDownControlArea 
                            DropDownContextMenu="{Binding Root.Manager.DocumentContextMenu}"
                            DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}" >
                        <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="0,2,0,1">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.ColumnSpan="2" Background="Transparent"/>
                                <ContentPresenter Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" 
                                              ContentTemplate="{Binding DocumentHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                              ContentTemplateSelector="{Binding DocumentHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"/>
                                <!-- Close button should be moved out to the container style -->
                                <Button 
                                    x:Name="DocumentCloseButton" 
                                    Style="{StaticResource AvalonDock_ThemeMonotone_ButtonStyle}"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center"
                                    Grid.Column="1" 
                                    Margin="5,0,0,0" 
                                    Visibility="Hidden" 
                                    Command="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                    ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}">
                                    <Path Stroke="{DynamicResource GlyphBrush}" StrokeThickness="2" x:Name="PART_ClosePinPath" Data="M 2 9 L 9 2  M9,9 L2,2" SnapsToDevicePixels="True">

                                    </Path>
                                </Button>
                            </Grid>
                        </Border>
                    </avalonDockControls:DropDownControlArea>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsSelected}" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="DocumentCloseButton"  />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsLastFocusedDocument}" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="DocumentCloseButton"  />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsActive}" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="DocumentCloseButton"  />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="DocumentCloseButton"  />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=CanClose}" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="DocumentCloseButton"  />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" SourceName="DocumentCloseButton" Value="True">
                            <Setter Property="Stroke" TargetName="PART_ClosePinPath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="DocumentCloseButton" Value="True">
                            <Setter Property="Stroke" TargetName="PART_ClosePinPath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="PART_ClosePinPath" Value="{DynamicResource DisabledBrush}" />
                            <Setter Property="BorderBrush"  Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
                    <avalonDockControls:DropDownControlArea 
                            DropDownContextMenu="{Binding Root.Manager.AnchorableContextMenu}"
                            DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <ContentPresenter Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" 
                                          ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                          ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"/>
                                <avalonDockControls:DropDownControlArea 
                                Grid.Column="0"
                                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Grid>
                        </Border>
                    </avalonDockControls:DropDownControlArea>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
                    <Border 
                        x:Name="Bd"
                        Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Border x:Name="Header"
                                    CornerRadius="0"
                                Background="{DynamicResource BaseBrush}">
                                <avalonDockControls:AnchorablePaneTitle 
                                    Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Border>
                            <ContentPresenter 
                                Grid.Row="1"
                                FlowDirection="{TemplateBinding FlowDirection}"
                                Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"/>

                            <!--<ContentPresenter 
                                Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}" 
                                ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                Grid.Row="1"/>-->
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Header"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
        <Setter Property="Foreground" Value="{DynamicResource VeryLighterBaseBrush}"/>
        <Setter Property="Background" Value="{DynamicResource BaseBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DarkerSelectedBrush}"/>
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome
                    ResizeBorderThickness="10"
                    CaptionHeight="18"
                    CornerRadius="{DynamicResource DefaultCornerRadius}"
                    GlassFrameThickness="0"
                    ShowSystemMenu="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
                    <Grid>
                        <Border x:Name="WindowBorder" 
                                BorderThickness="{DynamicResource DefaultBorderThickness}" 
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid Margin="3">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="18"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Border x:Name="Header"
                                        Padding="2,0,2,0">
                                    <Grid Background="{DynamicResource LighterBaseGradientHoverBrush}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter Content="{Binding Model.RootDocument, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  ContentTemplate="{Binding Model.Root.Manager.DocumentTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                                  ContentTemplateSelector="{Binding Model.Root.Manager.DocumentTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>


                                        <avalonDockControls:DropDownButton
                                            x:Name="ContextMenuDropdownButton"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Style="{StaticResource AvalonDock_ThemeMonotone_ToolButtonStyle}"
                                            Focusable="False"
                                            Grid.Column="1"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            VerticalContentAlignment="Center"
                                            HorizontalContentAlignment="Center"
                                            DropDownContextMenu="{Binding Model.Root.Manager.DocumentContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                            DropDownContextMenuDataContext="{Binding Path=RootDocumentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Document_CxMenu_Hint}">
                                            <Path Data="M2,6 L10,6 L6,10"  Name="PART_PinMenuPath" Fill="{DynamicResource TextBrush}" />
                                        </avalonDockControls:DropDownButton>

                                        <Button 
                                            x:Name="PART_PinMaximize"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Focusable="False"
                                            Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolToVisibilityConverter}}"
                                            Style="{StaticResource AvalonDock_ThemeMonotone_ButtonStyle}"
                                            Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                                            Grid.Column="2">
                                            <Path Name="PART_PinMaximizePath" Fill="{DynamicResource TextBrush}">
                                                <Path.Data>
                                                    <CombinedGeometry GeometryCombineMode="Xor">
                                                        <CombinedGeometry.Geometry1>
                                                            <PathGeometry Figures="M 2,4 L10,4 L10,10 L2,10" />
                                                        </CombinedGeometry.Geometry1>
                                                        <CombinedGeometry.Geometry2>
                                                            <PathGeometry Figures="M 1,2 L11,2 L11,11 L1,11" />
                                                        </CombinedGeometry.Geometry2>
                                                    </CombinedGeometry>
                                                </Path.Data>
                                            </Path>
                                        </Button>

                                        <Button 
                                            x:Name="PART_PinRestore"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Focusable="False"
                                            Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}"
                                            Style="{StaticResource AvalonDock_ThemeMonotone_ButtonStyle}"
                                            Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                                            Grid.Column="2">
                                            <Path Name="PART_PinRestorePath" Fill="{DynamicResource TextBrush}">
                                                <Path.Data>
                                                    <CombinedGeometry GeometryCombineMode="Union">
                                                        <CombinedGeometry.Geometry1>
                                                            <CombinedGeometry GeometryCombineMode="Xor">
                                                                <CombinedGeometry.Geometry1>
                                                                    <PathGeometry Figures="M 2,6 L8,6 L8,10 L2,10" />
                                                                </CombinedGeometry.Geometry1>
                                                                <CombinedGeometry.Geometry2>
                                                                    <PathGeometry Figures="M 1,4 L9,4 L9,11 L1,11" />
                                                                </CombinedGeometry.Geometry2>
                                                            </CombinedGeometry>
                                                        </CombinedGeometry.Geometry1>
                                                        <CombinedGeometry.Geometry2>
                                                            <CombinedGeometry GeometryCombineMode="Xor">
                                                                <CombinedGeometry.Geometry1>
                                                                    <PathGeometry Figures="M 4,3 L10,3 L10,7 L8,7 L8,8 L3,8 L3,6 L4,6 L4,7" />
                                                                </CombinedGeometry.Geometry1>
                                                                <CombinedGeometry.Geometry2>
                                                                    <PathGeometry Figures="M 3,1 L11,1 L11,8 L3,8" />
                                                                </CombinedGeometry.Geometry2>
                                                            </CombinedGeometry>
                                                        </CombinedGeometry.Geometry2>
                                                    </CombinedGeometry>
                                                </Path.Data>
                                            </Path>
                                        </Button>

                                        <Button 
                                            x:Name="PART_PinClose"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Focusable="False"
                                            Style="{StaticResource AvalonDock_ThemeMonotone_ButtonStyle}"
                                            Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                            Command="{Binding Path=RootDocumentLayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
                                            Grid.Column="3">
                                           <Path Stroke="{DynamicResource GlyphBrush}" StrokeThickness="2" x:Name="PART_PinClosePath" Data="M 2 9 L 9 2  M9,9 L2,2"   SnapsToDevicePixels="True">
                                 
                                            
                                            </Path>
                                        </Button>
                                    </Grid>
                                </Border>
                                <ContentPresenter Content="{TemplateBinding Content}" Grid.Row="1"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="Padding" Value="3" TargetName="WindowBorder"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.RootDocument.IsActive}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.RootDocument.IsLastFocusedDocument}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush"
									        Value="{DynamicResource DarkerSelectedBrush}" />
                            <Setter Property="Background"
									        Value="{DynamicResource DarkerSelectedBrush}" />
                            <Setter Property="Background"
									        Value="{DynamicResource BaseBrush}" TargetName="Header" />
                            <Setter Property="TextElement.Foreground"
									        Value="{DynamicResource TextBrush}"  TargetName="Header"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.RootDocument.IsActive}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.RootDocument.IsLastFocusedDocument}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush"
									        Value="{DynamicResource SelectedTabColorBrush}" />
                            <Setter Property="Background"
									        Value="{DynamicResource SelectedTabColorBrush}" />
                            <Setter Property="Background"
									        Value="{DynamicResource BaseBrush}" TargetName="Header" />
                            <Setter Property="TextElement.Foreground"
									        Value="{DynamicResource TextBrush}" TargetName="Header"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" SourceName="ContextMenuDropdownButton" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinMenuPath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" SourceName="ContextMenuDropdownButton" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinMenuPath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_PinMaximize" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinMaximizePath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="PART_PinMaximize" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinMaximizePath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_PinRestore" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinRestorePath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="PART_PinRestore" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinRestorePath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_PinClose" Value="True">
                            <Setter Property="Stroke" TargetName="PART_PinClosePath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="PART_PinClose" Value="True">
                            <Setter Property="Stroke" TargetName="PART_PinClosePath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
        <Setter Property="Background" Value="{DynamicResource BaseBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DarkerSelectedBrush}"/>
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome
                    ResizeBorderThickness="10"
                    CaptionHeight="18"
                    CornerRadius="{DynamicResource DefaultCornerRadius}"
                    GlassFrameThickness="0"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
                    <Grid>
                        <Border x:Name="WindowBorder" 
                                BorderThickness="{DynamicResource DefaultBorderThickness}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource DarkerSelectedBrush}">
                            <Grid >
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="18"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Border x:Name="Header" 
                                        CornerRadius="0"
                                        Padding="2,0,2,0"
                                        TextElement.Foreground="{DynamicResource HoverTabColorBrush}"
                                        Background="{DynamicResource LighterBaseGradientHoverBrush}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <Border
                                            Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}">
                                            <avalonDockControls:DropDownControlArea 
                                                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                                                    <ContentPresenter
                                                      Content="{Binding Model.SinglePane.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}" 
                                                      ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                                      ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            </avalonDockControls:DropDownControlArea>
                                        </Border>

                                        <avalonDockControls:DropDownButton
                                            x:Name="SinglePaneContextMenu"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}"
                                            Style="{StaticResource AvalonDock_ThemeMonotone_ToolButtonStyle}"
                                            Focusable="False"
                                            Grid.Column="1"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            VerticalContentAlignment="Center"
                                            HorizontalContentAlignment="Center"
                                            DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                            DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
                                            <Path Data="M2,6 L10,6 L6,10"  Name="PART_PinMenuPath" Fill="{DynamicResource TextBrush}" />
                                        </avalonDockControls:DropDownButton>

                                        <Button 
                                            x:Name="PART_PinMaximize"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Focusable="False"
                                            Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolToVisibilityConverter}}"
                                            Style="{StaticResource AvalonDock_ThemeMonotone_ButtonStyle}"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            VerticalContentAlignment="Center"
                                            HorizontalContentAlignment="Center"
                                            Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                                            Grid.Column="2">
                                            <Path Name="PART_PinMaximizePath" Fill="{DynamicResource TextBrush}">
                                                <Path.Data>
                                                    <CombinedGeometry GeometryCombineMode="Xor">
                                                        <CombinedGeometry.Geometry1>
                                                            <PathGeometry Figures="M 2,4 L10,4 L10,10 L2,10" />
                                                        </CombinedGeometry.Geometry1>
                                                        <CombinedGeometry.Geometry2>
                                                            <PathGeometry Figures="M 1,2 L11,2 L11,11 L1,11" />
                                                        </CombinedGeometry.Geometry2>
                                                    </CombinedGeometry>
                                                </Path.Data>
                                            </Path>
                                        </Button>

                                        <Button 
                                            x:Name="PART_PinRestore"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Focusable="False"
                                            Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}"
                                            Style="{StaticResource AvalonDock_ThemeMonotone_ButtonStyle}"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                                            Grid.Column="2">
                                            <Path Name="PART_PinRestorePath" Fill="{DynamicResource TextBrush}">
                                                <Path.Data>
                                                    <CombinedGeometry GeometryCombineMode="Union">
                                                        <CombinedGeometry.Geometry1>
                                                            <CombinedGeometry GeometryCombineMode="Xor">
                                                                <CombinedGeometry.Geometry1>
                                                                    <PathGeometry Figures="M 2,6 L8,6 L8,10 L2,10" />
                                                                </CombinedGeometry.Geometry1>
                                                                <CombinedGeometry.Geometry2>
                                                                    <PathGeometry Figures="M 1,4 L9,4 L9,11 L1,11" />
                                                                </CombinedGeometry.Geometry2>
                                                            </CombinedGeometry>
                                                        </CombinedGeometry.Geometry1>
                                                        <CombinedGeometry.Geometry2>
                                                            <CombinedGeometry GeometryCombineMode="Xor">
                                                                <CombinedGeometry.Geometry1>
                                                                    <PathGeometry Figures="M 4,3 L10,3 L10,7 L8,7 L8,8 L3,8 L3,6 L4,6 L4,7" />
                                                                </CombinedGeometry.Geometry1>
                                                                <CombinedGeometry.Geometry2>
                                                                    <PathGeometry Figures="M 3,1 L11,1 L11,8 L3,8" />
                                                                </CombinedGeometry.Geometry2>
                                                            </CombinedGeometry>
                                                        </CombinedGeometry.Geometry2>
                                                    </CombinedGeometry>
                                                </Path.Data>
                                            </Path>
                                        </Button>

                                        <Button 
                                            x:Name="PART_PinClose"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Focusable="False"
                                            Style="{StaticResource AvalonDock_ThemeMonotone_ButtonStyle}"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                            Command="{Binding HideWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                                            Grid.Column="3">
                                            <Path Stroke="{DynamicResource GlyphBrush}" StrokeThickness="2" x:Name="PART_PinClosePath" Data="M 2 9 L 9 2  M9,9 L2,2" SnapsToDevicePixels="True">

                                            </Path>
                                        </Button>
                                    </Grid>
                                </Border>
                                <ContentPresenter Margin="2"
                                    Content="{TemplateBinding Content}" Grid.Row="1"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="Padding" Value="3" TargetName="WindowBorder"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LighterBaseGradientBrush2}" TargetName="Header"/>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource TextBrush}" TargetName="Header"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" SourceName="SinglePaneContextMenu" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinMenuPath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" SourceName="SinglePaneContextMenu" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinMenuPath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_PinMaximize" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinMaximizePath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="PART_PinMaximize" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinMaximizePath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_PinRestore" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinRestorePath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="PART_PinRestore" Value="True">
                            <Setter Property="Fill" TargetName="PART_PinRestorePath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_PinClose" Value="True">
                            <Setter Property="Stroke" TargetName="PART_PinClosePath" Value="{DynamicResource SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="PART_PinClose" Value="True">
                            <Setter Property="Stroke" TargetName="PART_PinClosePath" Value="{DynamicResource DarkerSelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutAutoHideWindowControl}" TargetType="{x:Type avalonDockControls:LayoutAutoHideWindowControl}">
        <Setter Property="Background" Value="{DynamicResource BaseBrush}"/>
    </Style>


    
    <Style x:Key="AvalonDock_ThemeMonotone_NavigatorWindowListBoxItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle RadiusY="2" RadiusX="2" Stroke="#8E6EA6F5" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="AvalonDock_ThemeMonotone_NavigatorWindowListBoxItemHoverFill" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF1FBFF" Offset="0"/>
        <GradientStop Color="#FFD5F1FE" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="AvalonDock_ThemeMonotone_NavigatorWindowListBoxItemSelectedFill" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFD9F4FF" Offset="0"/>
        <GradientStop Color="#FF9BDDFB" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="AvalonDock_ThemeMonotone_NavigatorWindowListBoxItemSelectedInactiveFill" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFEEEDED" Offset="0"/>
        <GradientStop Color="#FFDDDDDD" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="AvalonDock_ThemeMonotone_NavigatorWindowListBoxItemSelectedHoverFill" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFEAF9FF" Offset="0"/>
        <GradientStop Color="#FFC9EDFD" Offset="1"/>
    </LinearGradientBrush>

    <Style x:Key="{x:Type avalonDockControls:NavigatorWindow}" TargetType="{x:Type avalonDockControls:NavigatorWindow}">
        <Setter Property="Background" Value="{DynamicResource BaseColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:NavigatorWindow}">
                    <Grid>
                        <Border x:Name="WindowBorder" BorderThickness="{DynamicResource DefaultBorderThickness}"
                                CornerRadius="{DynamicResource DefaultCornerRadius}"
                                Background="{DynamicResource BaseBrush}"
                                BorderBrush="{DynamicResource BaseBorderBrush}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="54"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <Grid Margin="5">
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Image 
                                            Source="{Binding SelectedDocument.LayoutElement.IconSource, Converter={StaticResource NullToDoNothingConverter}}"
                                            Stretch="None"
                                            Visibility="{Binding SelectedDocument.LayoutElement.IconSource, Converter={StaticResource BoolToVisibilityConverter} }"/>
                                        <TextBlock Text="{Binding SelectedDocument.LayoutElement.Title}" TextTrimming="CharacterEllipsis" Grid.Column="1" VerticalAlignment="Center" FontWeight="Bold" Margin="4,0,0,0"/>
                                    </Grid>
                                    <TextBlock  Text="{Binding SelectedDocument.LayoutElement.Description}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
                                </Grid>

                                <Border Grid.Row="1" 
                                        BorderBrush="{DynamicResource BaseBorderBrush}" BorderThickness="{DynamicResource TabHeaderLeftThicknessInverted}"
                                        Background="{DynamicResource LighterBaseGradientBrush}"
                                        MinHeight="200" >
                                    <Grid  Margin="5">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Grid Margin="5">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Text="Active Tool Windows" FontWeight="Bold" Margin="0,3,0,4"/>
                                            <ListBox Grid.Row="1" 
                                                     ItemsSource="{Binding Anchorables}"
                                                     SelectedItem="{Binding SelectedAnchorable, Mode=TwoWay}"                                                      
                                                     Background="Transparent" 
                                                     BorderThickness="0"
                                                     MaxHeight="400">
                                                <ListBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="16"/>
                                                                <ColumnDefinition Width="150"/>
                                                            </Grid.ColumnDefinitions>
                                                            <Image Source="{Binding LayoutElement.IconSource, Converter={StaticResource NullToDoNothingConverter}}" Stretch="None"/>
                                                            <TextBlock Text="{Binding LayoutElement.Title}" TextTrimming="CharacterEllipsis" Grid.Column="1" Margin="4,0,0,0"/>
                                                        </Grid>
                                                    </DataTemplate>
                                                </ListBox.ItemTemplate>
                                            </ListBox>
                                        </Grid>
                                        <Grid Grid.Column="1" Margin="5">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Text="Active Files" FontWeight="Bold" Margin="0,3,0,4"/>
                                            <ListBox 
                                                Grid.Row="1" 
                                                ItemsSource="{Binding Documents}" 
                                                SelectedItem="{Binding SelectedDocument, Mode=TwoWay}" 
                                                Background="Transparent"
                                                BorderThickness="0" 
                                                MaxHeight="400">
                                                <ListBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="16"/>
                                                                <ColumnDefinition Width="150"/>
                                                            </Grid.ColumnDefinitions>
                                                            <Image Source="{Binding LayoutElement.IconSource, Converter={StaticResource NullToDoNothingConverter}}" Stretch="None"/>
                                                            <TextBlock Text="{Binding LayoutElement.Title}" TextTrimming="CharacterEllipsis" Grid.Column="1" Margin="4,0,0,0"/>
                                                        </Grid>
                                                    </DataTemplate>
                                                </ListBox.ItemTemplate>
                                                <ListBox.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <WrapPanel Orientation="Vertical"/>
                                                    </ItemsPanelTemplate>
                                                </ListBox.ItemsPanel>
                                            </ListBox>
                                        </Grid>
                                    </Grid>
                                </Border>

                                <Grid Grid.Row="2" Margin="5">
                                    <TextBlock Text="{Binding SelectedDocument.LayoutElement.ToolTip}" VerticalAlignment="Center"/>
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>


</ResourceDictionary>
